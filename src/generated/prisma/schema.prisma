// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  bio         String?
  gender      String?
  age         Int?
  location    String?
  preferences String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts       Account[]
  sessions       Session[]
  photos         Photo[]
  sentLikes      Swipe[]   @relation("UserSentLikes")
  receivedLikes  Swipe[]   @relation("UserReceivedLikes")
  matchesAsUser1 Match[]   @relation("User1Matches")
  matchesAsUser2 Match[]   @relation("User2Matches")
  messages       Message[]
}

model Photo {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  url       String
  createdAt DateTime @default(now())
}

model Swipe {
  id         String   @id @default(cuid())
  fromUser   User     @relation("UserSentLikes", fields: [fromUserId], references: [id])
  toUser     User     @relation("UserReceivedLikes", fields: [toUserId], references: [id])
  fromUserId String
  toUserId   String
  createdAt  DateTime @default(now())
}

model Match {
  id        String   @id @default(cuid())
  user1     User     @relation("User1Matches", fields: [user1Id], references: [id])
  user2     User     @relation("User2Matches", fields: [user2Id], references: [id])
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}
